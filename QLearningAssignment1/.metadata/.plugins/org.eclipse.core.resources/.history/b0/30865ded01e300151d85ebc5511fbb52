import java.text.DecimalFormat;
import java.util.Random;
 
/**
 * @author Kunuk Nykjaer
 */
public class Qlearning {
    final DecimalFormat df = new DecimalFormat("#.##");
 
    private Random random = new Random();
    
    // path finding
    final double alpha = 0.1;
    final double gamma = 0.9;
 
 
// states A,B,C,D,E,F
// e.g. from A we can go to B or D
// from C we can only go to C 
// C is goal state, reward 100 when B->C or F->C
// 
// _________
// |A|B|C|D|
// |_______|
// |E|F|G|H|
// |_______|
// |I|J|K|L|
// |_______|
// |M|N|O|P|
// |_______|
//
 
    /*
    final int stateA = 0;
    final int stateB = 1;
    final int stateC = 2;
    final int stateD = 3;
    final int stateE = 4;
    final int stateF = 5;
    final int stateG = 6;
    final int stateH = 7;
    final int stateI = 8;
    final int stateJ = 9;
    final int stateK = 10;
    final int stateL = 11;
    final int stateM = 12;
    final int stateN = 13;
    final int stateO = 14;
    final int stateP = 15;
    */
 
    
    //Stored random number seeds
    final long seedZero = 0;
    
    final int xWidth = 10;
    final int yWidth = 10;
    final int statesCount = 100;
    
    int goalState;
    
    final int[][] states = new int[xWidth][yWidth];
    int[][][] actions;
    
    
    // http://en.wikipedia.org/wiki/Q-learning
    // http://people.revoledu.com/kardi/tutorial/ReinforcementLearning/Q-Learning.htm
 
    // Q(s,a)= Q(s,a) + alpha * (R(s,a) + gamma * Max(next state, all actions) - Q(s,a))
 
    int[][][] R = new int[xWidth][yWidth][statesCount]; // reward lookup
    double[][][] Q = new double[xWidth][yWidth][statesCount]; // Q learning
 
    /*
    int[] actionsFromA = new int[] { stateB, stateE };
    int[] actionsFromB = new int[] { stateA, stateC, stateF };
    int[] actionsFromC = new int[] { stateB, stateD, stateG };
    int[] actionsFromD = new int[] { stateC };
    int[] actionsFromE = new int[] { stateA, stateF, stateI };
    int[] actionsFromF = new int[] { stateB, stateE, stateG};
    int[] actionsFromG = new int[] { stateC, stateF, stateK};
    int[] actionsFromH = new int[] { };
    int[] actionsFromI = new int[] { stateE, stateM};
    int[] actionsFromJ = new int[] { };
    int[] actionsFromK = new int[] { stateG, stateL, stateO };
    int[] actionsFromL = new int[] { stateK, stateP };
    int[] actionsFromM = new int[] { stateI, stateN };
    int[] actionsFromN = new int[] { stateM, stateO };
    int[] actionsFromO = new int[] { stateK, stateN, stateP };
    int[] actionsFromP = new int[] { stateO, stateL };
    
    
    
    int[][] actions = new int[][] { actionsFromA, actionsFromB, actionsFromC, actionsFromD, 
    								actionsFromE, actionsFromF, actionsFromG, actionsFromH,
    								actionsFromI, actionsFromJ, actionsFromK, actionsFromL,
    								actionsFromM, actionsFromN, actionsFromO, actionsFromP};
 */
 
 
    String[][] stateNames;
 
    public Qlearning() {
        init();
    }
 
    public void init() {

        random = new Random(seedZero);
    	stateNames = new String[statesCount];
    	for(int i = 0; i < statesCount; i++){
    		stateNames[i] = "" +i;
    	}
    	
    	goalState = random.nextInt(statesCount);
    	actions = new int[statesCount][];
    	for(int i = 0; i < statesCount; i++){
    		int [] actionsForLayer;
    		if(i != goalState){
    			
    			int limit = 0; //used to determine if we're on an edge/ edges the maximum number of connections we can have
    			
    			
    			
    			
    			int numConnections = random.nextInt(statesCount);
    			actionsForLayer = new int[numConnections];
    		
    			for(int j = 0; j < actionsForLayer.length; j++){
    				int nextRand = random.nextInt(statesCount);
    			
    				if(nextRand == goalState){
    					R[i][goalState] = 100;
    				}
    			
    				actionsForLayer[j] = nextRand;
    			}
    		}
    		else{
    			actionsForLayer = new int[0];
    		}
    		actions[i] = (actionsForLayer);
    	} 
    	
    	//Randomly generate the graph
    	
    }
 
    public static void main(String[] args) {
        long BEGIN = System.currentTimeMillis();
 
        Qlearning obj = new Qlearning();
 
        obj.run();
        obj.printResult();
        obj.showPolicy();
 
        long END = System.currentTimeMillis();
        System.out.println("Time: " + (END - BEGIN) / 1000.0 + " sec.");
    }
 
    void run() {
        /*
         1. Set parameter , and environment reward matrix R 
         2. Initialize matrix Q as zero matrix 
         3. For each episode: Select random initial state 
            Do while not reach goal state o 
                Select one among all possible actions for the current state o 
                Using this possible action, consider to go to the next state o 
                Get maximum Q value of this next state based on all possible actions o 
                Compute o Set the next state as the current state
         */
 
        // For each episode
        for (int i = 0; i < 1000; i++) { // train episodes
        	
        	//TODO: implement epsilon value
        	
            // Select random initial state
            int state = random.nextInt(statesCount);
            while (state != goalState) // goal state
            {
                // Select one among all possible actions for the current state
                int[] actionsFromState = actions[state];
                 
                if(actionsFromState.length > 0)
                {
	                // Selection strategy is random in this example
	                int index = random.nextInt(actionsFromState.length);
	                int action = actionsFromState[index];
	 
	                // Action outcome is set to deterministic in this example
	                // Transition probability is 1
	                int nextState = action; // data structure
	 
	                // Using this possible action, consider to go to the next state
	                double q = Q(state, action);
	                double maxQ = maxQ(nextState);
	                int r = R(state, action);
	 
	                double value = q + alpha * (r + gamma * maxQ - q);
	                setQ(state, action, value);
	 
	                // Set the next state as the current state
	                state = nextState;
                }
                else{
                	state = random.nextInt(statesCount);
                }
            }
        }
    }
 
    double maxQ(int s) {
        int[] actionsFromState = actions[s];
        double maxValue = Double.MIN_VALUE;
        for (int i = 0; i < actionsFromState.length; i++) {
            int nextState = actionsFromState[i];
            double value = Q[s][nextState];
 
            if (value > maxValue)
                maxValue = value;
        }
        return maxValue;
    }
 
    // get policy from state
    int policy(int state) {
        int[] actionsFromState = actions[state];
        double maxValue = Double.MIN_VALUE;
        int policyGotoState = state; // default goto self if not found
        for (int i = 0; i < actionsFromState.length; i++) {
            int nextState = actionsFromState[i];
            double value = Q[state][nextState];
 
            if (value > maxValue) {
                maxValue = value;
                policyGotoState = nextState;
            }
        }
        return policyGotoState;
    }
 
    double Q(int s, int a) {
        return Q[s][a];
    }
 
    void setQ(int s, int a, double value) {
        Q[s][a] = value;
    }
 
    int R(int s, int a) {
        return R[s][a];
    }
 
    void printResult() {
        System.out.println("Print result");
        for (int i = 0; i < Q.length; i++) {
            System.out.print("out from " + stateNames[i] + ":  ");
            for (int j = 0; j < Q[i].length; j++) {
                System.out.print(df.format(Q[i][j]) + " ");
            }
            System.out.println();
        }
    }
 
    // policy is maxQ(states)
    void showPolicy() {
        System.out.println("\nshowPolicy");
        for (int i = 0; i < states.length; i++) {
            int from = states[i];
            int to =  policy(from);
            System.out.println("from "+stateNames[from]+" goto "+stateNames[to]);
        }           
    }
}
